DROP TABLE IF EXISTS TB_USER_MAIN;
DROP TABLE IF EXISTS TB_USER_WALLET;
DROP TABLE IF EXISTS TB_USER_TRANSACTION;
DROP TABLE IF EXISTS TB_CURRENCY_PRICE_SNAPSHOT;

CREATE TABLE TB_USER_MAIN (
    USER_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    USERNAME VARCHAR(50) NOT NULL UNIQUE,
    HASHED_PASSWORD VARCHAR(255) NOT NULL,
    CRE_ON TIMESTAMP NOT NULL,
    UPD_ON TIMESTAMP
);

CREATE TABLE TB_USER_WALLET (
	WALLET_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    USER_ID BIGINT NOT NULL,
    CURRENCY VARCHAR(50) NOT NULL,
    QTY_BALANCE DECIMAL(20, 8) NOT NULL,
    CRE_ON TIMESTAMP NOT NULL,
    UPD_ON TIMESTAMP,
    UNIQUE (USER_ID, CURRENCY),
    FOREIGN KEY (USER_ID) REFERENCES TB_USER_MAIN(USER_ID)
);

CREATE TABLE TB_USER_TRANSACTION (
    TRANSACTION_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    USER_ID BIGINT NOT NULL,  
    CURRENCY_BOUGHT VARCHAR(50) NOT NULL,
    CURRENCY_SOLD VARCHAR(50) NOT NULL,
    QTY_BOUGHT DECIMAL(20, 8) NOT NULL,
    QTY_SOLD DECIMAL(20, 8) NOT NULL,
    PRICE_SOLD DECIMAL(20, 8) NOT NULL,
    PRICE_BOUGHT DECIMAL(20, 8) NOT NULL,
    CRE_ON TIMESTAMP NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES TB_USER_MAIN(USER_ID)
);

CREATE TABLE TB_CURRENCY_PRICE_SNAPSHOT (
    SEQNO BIGINT PRIMARY KEY,
    CURRENCY_PAIR VARCHAR(50) NOT NULL,
    BEST_BID_SOURCE VARCHAR(50) NOT NULL,
    BEST_BID_PRICE DECIMAL(20, 8) NOT NULL,
    BEST_ASK_SOURCE VARCHAR(50) NOT NULL,
    BEST_ASK_PRICE DECIMAL(20, 8) NOT NULL,
    CRE_ON TIMESTAMP NOT NULL
);


CREATE INDEX IDX_USER_ID ON TB_USER_TRANSACTION(USER_ID);
CREATE INDEX IDX_CRE_ON_TB_USER_TRANSACTION ON TB_USER_TRANSACTION(CRE_ON);

CREATE INDEX IDX_CURRENCY_PAIR ON TB_CURRENCY_PRICE_SNAPSHOT(CURRENCY_PAIR);
CREATE INDEX IDX_CRE_ON ON TB_CURRENCY_PRICE_SNAPSHOT(CRE_ON);

